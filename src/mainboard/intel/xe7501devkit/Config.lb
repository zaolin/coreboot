## CONFIG_XIP_ROM_SIZE must be a power of 2.
default CONFIG_XIP_ROM_SIZE = 64 * 1024
include /config/nofailovercalculation.lb

arch i386 end 

##
## Build the objects we have code for in this directory.
##

driver mainboard.o
if CONFIG_GENERATE_MP_TABLE 		object mptable.o 	 end
if CONFIG_GENERATE_PIRQ_TABLE 		object irq_tables.o	 end
if CONFIG_GENERATE_ACPI_TABLES 	object acpi_tables.o end
object reset.o

##
## Romcc output
##
makerule ./failover.E
        depends "$(CONFIG_MAINBOARD)/failover.c ../romcc"
        action "../romcc -E -O --label-prefix=failover -I$(TOP)/src -I. $(CPPFLAGS) $(CONFIG_MAINBOARD)/failover.c -o $@"
end

makerule ./failover.inc
        depends "$(CONFIG_MAINBOARD)/failover.c ../romcc"
        action "../romcc    -O --label-prefix=failover -I$(TOP)/src -I. $(CPPFLAGS) $(CONFIG_MAINBOARD)/failover.c -o $@"
end

makerule ./auto.E
        depends "$(CONFIG_MAINBOARD)/auto.c option_table.h ../romcc"
        action  "../romcc -E -mcpu=p4 -O2 -I$(TOP)/src -I. $(CPPFLAGS) $(CONFIG_MAINBOARD)/auto.c -o $@"
end
makerule ./auto.inc
        depends "$(CONFIG_MAINBOARD)/auto.c option_table.h ../romcc"
        action  "../romcc    -mcpu=p4 -O2 -I$(TOP)/src -I. $(CPPFLAGS) $(CONFIG_MAINBOARD)/auto.c -o $@"
end

##
## Build our 16 bit and 32 bit coreboot entry code
##
mainboardinit cpu/x86/16bit/entry16.inc
mainboardinit cpu/x86/32bit/entry32.inc
ldscript /cpu/x86/16bit/entry16.lds
ldscript /cpu/x86/32bit/entry32.lds

##
## Build our reset vector (This is where coreboot is entered)
##
if CONFIG_HAVE_FALLBACK_BOOT
    if CONFIG_USE_FALLBACK_IMAGE 
	    mainboardinit cpu/x86/16bit/reset16.inc 
	    ldscript /cpu/x86/16bit/reset16.lds
    else
	    mainboardinit cpu/x86/32bit/reset32.inc 
	    ldscript /cpu/x86/32bit/reset32.lds 
    end
else
	mainboardinit cpu/x86/16bit/reset16.inc 
	ldscript /cpu/x86/16bit/reset16.lds
end

### Should this be in the northbridge code?
mainboardinit arch/i386/lib/cpu_reset.inc

##
## Include an id string (For safe flashing)
##
mainboardinit arch/i386/lib/id.inc
ldscript /arch/i386/lib/id.lds

###
### This is the early phase of coreboot startup 
### Things are delicate and we test to see if we should
### failover to another image.
###
if CONFIG_USE_FALLBACK_IMAGE
	ldscript /arch/i386/lib/failover.lds 
	mainboardinit ./failover.inc
end

###
### O.k. We aren't just an intermediary anymore!
###

##
## Setup RAM
##
mainboardinit cpu/x86/fpu/enable_fpu.inc
mainboardinit cpu/x86/sse/enable_sse.inc
mainboardinit ./auto.inc
mainboardinit cpu/x86/sse/disable_sse.inc
mainboardinit cpu/x86/mmx/disable_mmx.inc

##
## Include the secondary Configuration files 
##
dir /pc80

config chip.h

# based on sample config for tyan/s2735
chip northbridge/intel/e7501
	device pci_domain 0 on
		device pci 0.0 on end # Chipset host controller
		device pci 0.1 on end # Host RASUM controller
		device pci 2.0 on # Hub interface B
			chip southbridge/intel/i82870 # P64H2
				device pci 1c.0 on end # IOAPIC - bus B
				device pci 1d.0 on end # Hub to PCI-B bridge
				device pci 1e.0 on end # IOAPIC - bus A
				device pci 1f.0 on end # Hub to PCI-A bridge
			end
		end
		device pci 3.0 off end # Hub interface C (82808AA connector - disable for now)
		device pci 4.0 on # Hub interface D
			chip southbridge/intel/i82870 # P64H2
				device pci 1c.0 on end # IOAPIC - bus B
				device pci 1d.0 on end # Hub to PCI-B bridge
				device pci 1e.0 on end # IOAPIC - bus A
				device pci 1f.0 on end # Hub to PCI-A bridge
			end
		end
		device pci 6.0 on end # E7501 Power management registers? (undocumented)
		chip southbridge/intel/i82801ca
			device pci 1d.0 off end # USB (might not work, Southbridge code needs looking at)
			device pci 1d.1 off end # USB (not populated)
			device pci 1d.2 off end # USB (not populated)
			device pci 1e.0 on # Hub to PCI bridge
				chip drivers/pci/onboard # VGA ROM
					device pci 0.0 on end
				end
			end
			device pci 1f.0 on # LPC bridge
				chip superio/smsc/lpc47b272
					device pnp 2e.0 off # Floppy
						io 0x60 = 0x3f0
						irq 0x70 = 6
						drq 0x74 = 2
					end
					device pnp 2e.3 off # Parallel Port
						io 0x60 = 0x378
						irq 0x70 = 7
					end
					device pnp 2e.4 on # Com1
						io 0x60 = 0x3f8
						irq 0x70 = 4
					end
					device pnp 2e.5 off # Com2
						io 0x60 = 0x2f8
						irq 0x70 = 3
					end
					device pnp 2e.7 on # Keyboard
						io 0x60 = 0x60
						io 0x62 = 0x64
						irq 0x70 = 1 # Keyboard interrupt
						irq 0x72 = 12 # Mouse interrupt
					end
					device pnp 2e.a off end # ACPI
				end
			end
			device pci 1f.1 on end # IDE
			device pci 1f.3 on end # SMBus
			device pci 1f.5 off end # AC97 Audio
			device pci 1f.6 off end # AC97 Modem
		end # SB
	end # PCI_DOMAIN
	device apic_cluster 0 on
		chip cpu/intel/socket_mPGA604
			device apic 0 on end
		end
		chip cpu/intel/socket_mPGA604
			device apic 6 on end
		end
	end
end
